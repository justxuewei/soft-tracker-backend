<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.niuxuewei.lucius.mapper.ProjectMemberPOMapper">
    <sql id="Base_Column_List">
            id,
            user_id,
            project_id,
            `role`
    </sql>
    <resultMap id="BaseResultMap" type="com.niuxuewei.lucius.entity.po.ProjectMemberPO">
    <!--@mbg.generated-->
    <result column="id" jdbcType="INTEGER" property="id" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="project_id" jdbcType="INTEGER" property="projectId" />
    <result column="role" jdbcType="VARCHAR" property="role" />
  </resultMap>
  <insert id="insert" parameterType="com.niuxuewei.lucius.entity.po.ProjectMemberPO">
    <!--@mbg.generated-->
    insert into project_member (id, user_id, project_id, 
      `role`)
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{projectId,jdbcType=INTEGER}, 
      #{role,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.niuxuewei.lucius.entity.po.ProjectMemberPO">
    <!--@mbg.generated-->
    insert into project_member
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="projectId != null">
        project_id,
      </if>
      <if test="role != null">
        `role`,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="projectId != null">
        #{projectId,jdbcType=INTEGER},
      </if>
      <if test="role != null">
        #{role,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>

<!--auto generated by MybatisCodeHelper on 2019-04-13-->
    <insert id="insertListSelective">
        INSERT INTO project_member(
        user_id,
        project_id,
        role
        )VALUES
        <foreach collection="list" item="element" index="index" separator=",">
            (
            #{element.userId,jdbcType=INTEGER},
            #{element.projectId,jdbcType=INTEGER},
            #{element.role,jdbcType=VARCHAR}
            )
        </foreach>
    </insert>

<!--auto generated by MybatisCodeHelper on 2019-04-13-->
    <select id="selectFirstByProjectIdAndUserId" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from project_member
        where project_id=#{projectId,jdbcType=INTEGER} and user_id=#{userId,jdbcType=INTEGER} limit 1
    </select>

<!--auto generated by MybatisCodeHelper on 2019-04-13-->
    <delete id="deleteByProjectId">
        delete
        from project_member
        where project_id = #{projectId,jdbcType=INTEGER}
    </delete>
</mapper>